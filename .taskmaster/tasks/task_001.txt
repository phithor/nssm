# Task ID: 1
# Title: Initialize Python Project & Repository
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Create git repo, Python virtual environment, and baseline directory structure for NSSM modules (scraper, db, nlp, dashboard).
# Details:
• mkdir NSSM/{scraper,db,nlp,dashboard,config,tests}
• git init; create .gitignore (venv, __pycache__, .env)
• poetry init or pip-tools requirements.txt with python 3.11
• Add core deps: requests, beautifulsoup4, psycopg2-binary, sqlalchemy, pandas, scikit-learn, transformers, streamlit, plotly, schedule, python-dotenv
• Setup pre-commit hooks: black, isort, flake8
• Dockerfile: slim-buster, copy src, install deps
• docker-compose.yml with app + postgres 15.
• Seed README explaining architecture.

# Test Strategy:
Run ‘docker-compose up’ → container builds without errors. Execute ‘pytest -q’ (empty suite) returns 0. Verify pre-commit runs on git commit.

# Subtasks:
## 1. Initialize Git Repository & Seed README [in-progress]
### Dependencies: None
### Description: Create project root, initialize git repository, and add a baseline README describing NSSM architecture.
### Details:
- Create project directory `NSSM` and navigate into it.
- Run `git init` to initialize repository.
- Add initial `README.md` including project overview, module descriptions, and contribution guidelines.

## 2. Generate Python Packaging & Dependency Management [pending]
### Dependencies: 1.1
### Description: Set up Poetry with Python 3.11 and define core dependencies for the project.
### Details:
- Run `poetry init --name NSSM --python ^3.11`.
- Add dependencies: requests, beautifulsoup4, psycopg2-binary, sqlalchemy, pandas, scikit-learn, transformers, streamlit, plotly, schedule, python-dotenv.
- Configure Poetry virtual environment and ensure `poetry.lock` is committed.

## 3. Establish Directory Structure with Module Stubs [pending]
### Dependencies: 1.1, 1.2
### Description: Create baseline folder hierarchy and `__init__.py` files for scraper, db, nlp, dashboard, config, and tests.
### Details:
- Execute `mkdir -p NSSM/{scraper,db,nlp,dashboard,config,tests}`.
- Add `__init__.py` to each package directory.
- Include placeholder test file `tests/test_placeholder.py`.

## 4. Configure Development Tooling [pending]
### Dependencies: 1.1, 1.2, 1.3
### Description: Add .gitignore, pre-commit hooks (black, isort, flake8), and pytest boilerplate for consistent development workflow.
### Details:
- Create `.gitignore` covering venv, `__pycache__`, `.env`, and build artifacts.
- Write `.flake8`, `pyproject.toml` or separate config for black & isort.
- Install and configure `pre-commit`; add hooks for black, isort, flake8.
- Add minimal `pytest.ini` and verify `pytest -q` returns 0.

## 5. Add Containerization Assets & Verify Compose [pending]
### Dependencies: 1.2, 1.3, 1.4
### Description: Create Dockerfile and docker-compose.yml with Postgres service; ensure `docker-compose up` builds and runs successfully.
### Details:
- Write `Dockerfile` based on python:3.11-slim-buster, copy source, and install dependencies via Poetry.
- Create `docker-compose.yml` defining app service and Postgres 15 database.
- Run `docker-compose up --build` and verify containers start without errors.

