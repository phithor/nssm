# Task ID: 6
# Title: Implement Alerting Engine
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Generate local notifications/logs when anomaly or sentiment flip occurs.
# Details:
• alerts/engine.py: listen to anomalies table inserts via polling.
• Rules configurable YAML (config/alerts.yml) e.g., post_cnt_z>2 & sentiment_avg>0.3.
• Notify via: print to stdout, desktop notify (plyer), optional webhook POST.
• Persist alert to alerts table.

# Test Strategy:
Mock anomaly event, run engine → capture stdout and DB row count++. Validate webhook sent via httpbin stub.

# Subtasks:
## 1. Design alert rule schema & YAML parser [pending]
### Dependencies: None
### Description: Define a flexible rule schema and implement a parser that loads config/alerts.yml into in-memory objects.
### Details:
• Specify allowed operands (>, <, >=, <=, =, !=) and logical operators (AND, OR).
• Support metric placeholders post_cnt_z, sentiment_avg, etc.
• Use pydantic models for validation; raise on bad config.
• Expose get_rules() that returns list[Rule].

## 2. Poll anomalies table & evaluate rules [pending]
### Dependencies: 6.1
### Description: Continuously read new rows from anomalies table and apply loaded rules to determine trigger events.
### Details:
• Implement polling loop with last_seen_id checkpoint.
• Map anomaly row fields to rule metrics.
• For each anomaly evaluate all rules; yield AlertEvent objects on match.
• Configurable poll interval via env/CLI.

## 3. Implement notification channels interface [pending]
### Dependencies: 6.1
### Description: Create notifier abstraction plus concrete stdout, desktop (plyer), and webhook POST implementations.
### Details:
• Base class Notifier.send(AlertEvent).
• StdoutNotifier prints JSON.
• DesktopNotifier uses plyer.notification.
• WebhookNotifier reads URL from env; async requests.post.
• Pluggable via alerts.yml channel list.

## 4. Persist alerts to database with idempotency [pending]
### Dependencies: 6.1, 6.2, 6.3
### Description: Insert triggered alerts into alerts table, avoiding duplicates on retried polling cycles.
### Details:
• Define SQLAlchemy Alert model if not existing.
• Unique constraint on (anomaly_id, rule).
• Upsert logic (ON CONFLICT DO NOTHING).
• Wrap in transactional session; commit per batch.

## 5. Write unit tests for alerting engine [pending]
### Dependencies: 6.1, 6.2, 6.3, 6.4
### Description: Mock anomalies, rules, and notifiers to verify notifications sent and DB rows created as expected.
### Details:
• Use pytest + pytest-mock.
• Fixture for in-memory SQLite DB.
• Patch plyer and requests to capture calls.
• Assert stdout contents.
• Coverage target ≥90%.

