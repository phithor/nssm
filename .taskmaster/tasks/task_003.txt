# Task ID: 3
# Title: Implement Forum Scraper (Hegnar & Avanza)
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Build resilient, polite scrapers that run continuously and store raw posts.
# Details:
• scraper/base.py defines Scraper abstract class(fetch(),parse())
• Implement hegnar.py, avanza.py using requests+bs4; fallback to Selenium for JS.
• Respect robots.txt but randomize headers, add 3-8s sleep.
• Extract (ticker regex like r"\b[A-Z]{2,4}\b"), timestamp, author, raw_text.
• Write to DB via SQLAlchemy session; bulk upserts.
• Schedule via schedule.every(1).minutes.
• Expose CLI ‘python -m scraper run’

# Test Strategy:
Unit test parser on saved HTML fixtures. Integration test hits live site with env var LIVE=true, asserts >0 posts saved. DB row count grows after run.

# Subtasks:
## 1. Define Scraper Base Class [pending]
### Dependencies: None
### Description: Create the abstract Scraper class with mandatory fetch() and parse() methods and shared helpers/attributes.
### Details:
File: scraper/base.py; use abc.ABCMeta; include user_agent, session, and __init__ with base_url; add basic error handling and logging stubs.

## 2. Develop Shared Scraper Utilities [pending]
### Dependencies: 3.1
### Description: Implement utilities for header randomization, polite delay (3-8 s), robots.txt compliance, and Selenium fallback wrapper.
### Details:
Files: scraper/utils/headers.py, delay.py, robots.py, selenium_wrapper.py; expose callable functions/classes reusable by all forum scrapers.

## 3. Implement Hegnar Forum Scraper [pending]
### Dependencies: 3.1, 3.2
### Description: Build hegnar.py scraper subclass to fetch forum pages, parse HTML, and extract ticker, timestamp, author, and raw_text.
### Details:
Use requests+BeautifulSoup; pagination support; regex r"\b[A-Z]{2,4}\b" for ticker; yield Post objects; handle anti-bot blocks with retry/backoff.

## 4. Implement Avanza Forum Scraper with Selenium Fallback [pending]
### Dependencies: 3.1, 3.2
### Description: Create avanza.py scraper that first tries requests+BS4 and falls back to Selenium when JS rendering required.
### Details:
Detect JS-rendered content via heuristic; manage headless Chrome driver; reuse shared utilities; extract same fields as Hegnar scraper.

## 5. Integrate Persistence Layer [pending]
### Dependencies: 3.1, 3.2, 3.3, 3.4
### Description: Wire both scrapers to SQLAlchemy session for bulk upsert of posts into the database, respecting unique constraints.
### Details:
Add db/session.py factory; implement upsert_posts(posts, session); ensure forum and ticker FK resolution; commit in batches.

## 6. Add Scheduling, CLI Entry-Point, and Logging [pending]
### Dependencies: 3.1, 3.3, 3.4, 3.5
### Description: Expose `python -m scraper run` command that schedules both scrapers every minute with structured logging.
### Details:
Use schedule library; configure logging via logging.config.dictConfig; graceful shutdown on SIGINT; argparse flags for interval, verbose.

## 7. Write Unit and Integration Tests [pending]
### Dependencies: 3.3, 3.4, 3.5, 3.6
### Description: Create pytest suite with HTML fixtures for parsers and live-site integration tests gated by LIVE=true env var.
### Details:
Mock network calls with responses; assert ticker extraction accuracy; integration test checks >0 new DB rows after run; CI workflow step.

